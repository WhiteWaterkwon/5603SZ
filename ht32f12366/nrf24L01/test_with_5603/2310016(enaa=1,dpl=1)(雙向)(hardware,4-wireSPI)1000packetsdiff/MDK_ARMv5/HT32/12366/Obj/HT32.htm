<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\12366\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\12366\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Nov 08 10:55:20 2023
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; host24L01_process &rArr; UnoClient_main &rArr; rf_Init &rArr; rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[49]">AES_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2d]">BFTM0_IRQHandler</a> from ht32f1xxxx_01_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2e]">BFTM1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4a]">BootProcess</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f1xxxx_01_it.o(i.BusFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[21]">COMP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[47]">CSIF_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f1xxxx_01_it.o(i.DebugMon_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[48]">EBI_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[f]">EVWUP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1b]">EXTI10_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1c]">EXTI11_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1d]">EXTI12_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1e]">EXTI13_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1f]">EXTI14_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[20]">EXTI15_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[16]">EXTI5_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[17]">EXTI6_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[18]">EXTI7_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[19]">EXTI8_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1a]">EXTI9_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2b]">GPTM0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2c]">GPTM1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f1xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2f]">I2C0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[30]">I2C1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[38]">I2S_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[10]">LPWUP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[23]">MCTM0BRK_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[26]">MCTM0CC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[25]">MCTM0TR_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[24]">MCTM0UP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[27]">MCTM1BRK_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2a]">MCTM1CC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[29]">MCTM1TR_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[28]">MCTM1UP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f1xxxx_01_it.o(i.MemManage_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f1xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3b]">PDMA_CH0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[45]">PDMA_CH10_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[46]">PDMA_CH11_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3c]">PDMA_CH1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3d]">PDMA_CH2_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3e]">PDMA_CH3_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3f]">PDMA_CH4_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[40]">PDMA_CH5_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[41]">PDMA_CH6_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[42]">PDMA_CH7_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[43]">PDMA_CH8_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[44]">PDMA_CH9_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from ht32f1xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4e]">Reset_Handler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[37]">SCI_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3a]">SDIO_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[31]">SPI0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f1xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f1xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_ht32f1xxxx_02.o(i.SystemInit) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[35]">UART0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[36]">UART1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[33]">USART0_IRQHandler</a> from ht32f1xxxx_01_it.o(i.USART0_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from ht32f1xxxx_01_it.o(i.USART1_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[39]">USB_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f1xxxx_01_it.o(i.UsageFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))

<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CSIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PDMA_CH10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PDMA_CH11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PDMA_CH8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PDMA_CH9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f1xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MISO_INPUT_MDOE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd012346_as_outputmode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PE_OUTPUT_MDOE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.BFTM0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>BFTM_EnaCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ht32f1xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[55]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ht32f1xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[56]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f1xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[84]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DueMain_main</STRONG> (Thumb, 574 bytes, Stack size 0 bytes, nrf2401_host.o(i.DueMain_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DueMain_main &rArr; rf_SendData &rArr; rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu16
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar_n
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetCEState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ResetStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReceiveData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_PowerUp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_IsDataAvailable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_FlushBuffer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_unit_50us
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_syncID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_prx_not_consecutive
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MISO_INPUT_MDOE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd012346_as_outputmode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PE_OUTPUT_MDOE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MISO_INPUT_MDOE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
</UL>

<P><STRONG><a name="[70]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MISO_INPUT_MDOE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_ReadOutBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_ReadOutBit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleOutBits
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_ToggleOutBits</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf2401_host.o(i.GPIO_ToggleOutBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ToggleOutBits
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_ptx_not_consecutive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_prx_not_consecutive
</UL>

<P><STRONG><a name="[90]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd012346_as_outputmode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetCEState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PE_OUTPUT_MDOE
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>PWRCU_CheckReadyAccessed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ht32f1xxxx_pwrcu.o(i.PWRCU_CheckReadyAccessed))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ht32f1xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SPI_MISO_INPUT_MDOE</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, softspi.o(i.SPI_MISO_INPUT_MDOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_MISO_INPUT_MDOE &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_softspi
</UL>

<P><STRONG><a name="[8c]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, system_ht32f1xxxx_02.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART0_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ht32f1xxxx_01_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>USART_FIFOReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_FIFOReset))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>USART_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ht32f1xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>USART_TxRxCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>UnoClient_main</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, nrf2401_host.o(i.UnoClient_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UnoClient_main &rArr; rf_Init &rArr; rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu16
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar_n
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendAckPayload
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ResetStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReceiveData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_PowerUp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Listen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_IsDataAvailable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetFifoStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_FlushBuffer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_ptx_not_consecutive
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6a]"></a>delay_unit_50us</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tmr50us.o(i.delay_unit_50us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_unit_50us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr50usIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[7e]"></a>host24L01_process</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, nrf2401_host.o(i.host24L01_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = host24L01_process &rArr; UnoClient_main &rArr; rf_Init &rArr; rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_softspi
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PE_OUTPUT_MDOE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>init_softspi</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softspi.o(i.init_softspi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_softspi &rArr; SPI_MISO_INPUT_MDOE &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MISO_INPUT_MDOE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd012346_as_outputmode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
</UL>

<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; host24L01_process &rArr; UnoClient_main &rArr; rf_Init &rArr; rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FIFOReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_CheckReadyAccessed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[59]"></a>rf_ConfigurePipe</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, softspi.o(i.rf_ConfigurePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rf_ConfigurePipe &rArr; rf_SetAddressWidth &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetAddressWidth
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetPipeAddress
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[5b]"></a>rf_FlushBuffer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, softspi.o(i.rf_FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_FlushBuffer &rArr; rf_SendCmd_1 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_1
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[7a]"></a>rf_GetFifoStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softspi.o(i.rf_GetFifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_GetFifoStatus &rArr; rf_ReadRegister &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_IsDataAvailable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
</UL>

<P><STRONG><a name="[5f]"></a>rf_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softspi.o(i.rf_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_GetStatus &rArr; rf_SendCmd_1 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_1
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_IsDataAvailable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[58]"></a>rf_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, softspi.o(i.rf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf_Init &rArr; rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetRetryDelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetRetryCount
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetDataRate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetCRC
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[66]"></a>rf_IsDataAvailable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, softspi.o(i.rf_IsDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_IsDataAvailable &rArr; rf_ReadRegister &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReadRegister
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetFifoStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[78]"></a>rf_Listen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softspi.o(i.rf_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_Listen &rArr; rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdBuffer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_SetCEState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
</UL>

<P><STRONG><a name="[5c]"></a>rf_PowerUp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softspi.o(i.rf_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_PowerUp &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[94]"></a>rf_ReadRegister</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, softspi.o(i.rf_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_ReadRegister &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_IsDataAvailable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetFifoStatus
</UL>

<P><STRONG><a name="[67]"></a>rf_ReceiveData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, softspi.o(i.rf_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_ReceiveData &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[5a]"></a>rf_ResetStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, softspi.o(i.rf_ResetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf_ResetStatus &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[79]"></a>rf_SendAckPayload</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, softspi.o(i.rf_SendAckPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SendAckPayload &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
</UL>

<P><STRONG><a name="[99]"></a>rf_SendCmdBuffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, softspi.o(i.rf_SendCmdBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetPipeAddress
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Listen
</UL>

<P><STRONG><a name="[93]"></a>rf_SendCmdMasked</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, softspi.o(i.rf_SendCmdMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReadRegister
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetRetryDelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetRetryCount
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetDataRate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetCRC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetAddressWidth
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ResetStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_PowerUp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
</UL>

<P><STRONG><a name="[64]"></a>rf_SendCmd_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, softspi.o(i.rf_SendCmd_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_SendCmd_1 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_GetStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_FlushBuffer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[60]"></a>rf_SendCmd_2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, softspi.o(i.rf_SendCmd_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[5d]"></a>rf_SendData</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, softspi.o(i.rf_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf_SendData &rArr; rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[92]"></a>rf_SetAddressWidth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, softspi.o(i.rf_SetAddressWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetAddressWidth &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
</UL>

<P><STRONG><a name="[98]"></a>rf_SetCRC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softspi.o(i.rf_SetCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetCRC &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
</UL>

<P><STRONG><a name="[97]"></a>rf_SetDataRate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, softspi.o(i.rf_SetDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetDataRate &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
</UL>

<P><STRONG><a name="[91]"></a>rf_SetPipeAddress</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, softspi.o(i.rf_SetPipeAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetPipeAddress &rArr; rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ConfigurePipe
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewrite_syncID
</UL>

<P><STRONG><a name="[95]"></a>rf_SetRetryCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, softspi.o(i.rf_SetRetryCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetRetryCount &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
</UL>

<P><STRONG><a name="[96]"></a>rf_SetRetryDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, softspi.o(i.rf_SetRetryDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_SetRetryDelay &rArr; rf_SendCmdMasked &rArr; rf_SendCmd_2 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Init
</UL>

<P><STRONG><a name="[80]"></a>set_PE_OUTPUT_MDOE</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, nrf2401_host.o(i.set_PE_OUTPUT_MDOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_PE_OUTPUT_MDOE &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host24L01_process
</UL>

<P><STRONG><a name="[9b]"></a>spi_Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, softspi.o(i.spi_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_TransferData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReadRegister
</UL>

<P><STRONG><a name="[5e]"></a>spi_SetCEState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softspi.o(i.spi_SetCEState))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Listen
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[9c]"></a>spi_TransferData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softspi.o(i.spi_TransferData))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[9a]"></a>spi_Write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, softspi.o(i.spi_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_TransferData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmdBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReadRegister
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendCmd_1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SendAckPayload
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_ReceiveData
</UL>

<P><STRONG><a name="[7d]"></a>tmr50usIsExpired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmr50us.o(i.tmr50usIsExpired))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_unit_50us
</UL>

<P><STRONG><a name="[83]"></a>uart_putchar</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart.o(i.uart_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lownibble_to_ascii
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar_n
</UL>

<P><STRONG><a name="[63]"></a>uart_putchar_n</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.uart_putchar_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_putchar_n &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_ptx_not_consecutive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_prx_not_consecutive
</UL>

<P><STRONG><a name="[61]"></a>uart_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.uart_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_puts &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_ptx_not_consecutive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_rxpackets_from_prx_not_consecutive
</UL>

<P><STRONG><a name="[62]"></a>uart_putu16</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart.o(i.uart_putu16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_putu16 &rArr; lownibble_to_ascii &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lownibble_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[69]"></a>uart_putu8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.uart_putu8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_putu8 &rArr; lownibble_to_ascii &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lownibble_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>debug_rxpackets_from_prx_not_consecutive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf2401_host.o(i.debug_rxpackets_from_prx_not_consecutive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_rxpackets_from_prx_not_consecutive &rArr; uart_puts &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar_n
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[7c]"></a>debug_rxpackets_from_ptx_not_consecutive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf2401_host.o(i.debug_rxpackets_from_ptx_not_consecutive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_rxpackets_from_ptx_not_consecutive &rArr; uart_puts &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar_n
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnoClient_main
</UL>

<P><STRONG><a name="[65]"></a>rewrite_syncID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf2401_host.o(i.rewrite_syncID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rewrite_syncID &rArr; rf_SetPipeAddress &rArr; rf_SendCmdBuffer &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_SetPipeAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DueMain_main
</UL>

<P><STRONG><a name="[81]"></a>pd012346_as_outputmode</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, softspi.o(i.pd012346_as_outputmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pd012346_as_outputmode &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_softspi
</UL>

<P><STRONG><a name="[82]"></a>lownibble_to_ascii</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.lownibble_to_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lownibble_to_ascii &rArr; uart_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putu16
</UL>

<P><STRONG><a name="[4a]"></a>BootProcess</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
